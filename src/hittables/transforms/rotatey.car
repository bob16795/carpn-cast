import "src/hittable.car"

extern proc sinf f32 : f32
extern proc cosf f32 : f32

struct RotateY {
    f32 cos_theta
    f32 sin_theta
    Hittable object

    AABB box

    def proc new Hittable f32 : Self {
        => angle

        Self result

        result.object swap =

        result.sin_theta angle sinf =
        result.cos_theta angle cosf =

        result.box result.object@ Hittable.boundingBox =

        Vec3 min
        Vec3 max

        min infinity infinity infinity Vec3.new =
        max infinity infinity infinity Vec3.new Vec3.neg =

        i32 i
        i32 j
        i32 k
        i32 c

        i 0 =

        while { i@ 2 < } : {
            j 0 =
            while { j@ 2 < } : {
                k 0 =
                while { k@ 2 < } : {
                    i@ f32' result.box.x.max@ * 1 i@ - f32' result.box.x.min@ * + => x
                    j@ f32' result.box.y.max@ * 1 j@ - f32' result.box.y.min@ * + => y
                    k@ f32' result.box.z.max@ * 1 k@ - f32' result.box.z.min@ * + => z

                    result.cos_theta@ x * result.sin_theta@ z * + => newx
                    result.sin_theta@ x * result.cos_theta@ z * swap - => newz

                    newx y newz Vec3.new => tester

                    c 0 =
                    while { c@ 3 < } : {
                        min c@ min@ c@ Vec3.axis tester c@ Vec3.axis fminf Vec3.setAxis
                        max c@ max@ c@ Vec3.axis tester c@ Vec3.axis fmaxf Vec3.setAxis

                        c copy@ 1 + =
                    }

                    k copy@ 1 + =
                }
                j copy@ 1 + =
            }
            i copy@ 1 + =
        }

        result.box min@ max@ AABB.newV =

        result@
    }

    def proc boundingBox Self* : AABB {
        @.box
    }

    def proc checkHit Self* HRay Vec3 Interval HitRecord* : bool {
        => record
        => time
        => center
        => ray
        => self

        Vec3 origin
        Vec3 dir

        origin ray.orig =
        dir ray.dir =

        origin.x self.cos_theta@ ray.orig.x * self.sin_theta@ ray.orig.z * - =
        origin.z self.sin_theta@ ray.orig.x * self.cos_theta@ ray.orig.z * + =
        
        dir.x self.cos_theta@ ray.dir.x * self.sin_theta@ ray.dir.z * - =
        dir.z self.sin_theta@ ray.dir.x * self.cos_theta@ ray.dir.z * + =

        HRay rotated
        rotated.orig origin@ =
        rotated.dir dir@ =
        rotated.time ray.time =

        self.object@ center rotated@ time record Hittable.checkHit ! if {
            false ret
        }

        Vec3 p
        p record.p@ =

        p.x self.cos_theta@ record.p.x@ * self.sin_theta@ record.p.z@ * + =
        p.z self.sin_theta@ record.p.x@ * self.cos_theta@ record.p.z@ * swap - =

        Vec3 normal
        normal record.normal@ =

        normal.x self.cos_theta@ record.normal.x@ * self.sin_theta@ record.normal.z@ * + =
        normal.z self.sin_theta@ record.normal.x@ * self.cos_theta@ record.normal.z@ * swap - =

        record.p p@ =
        record.normal normal@ =

        true
    }
}