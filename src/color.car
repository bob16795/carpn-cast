import "src/vec3.car"
import "src/interval.car"

extern proc printint u64 : void
extern proc printstr u8$* : void

struct Color {
    Vec3 data

    def proc new f32 f32 f32 : Self {
        Self result

        result.data.z swap =
        result.data.y swap =
        result.data.x swap =

        result@
    }

    def proc mix Self Self f32 : Self {
        => bpc
        => b
        => a

        Color result

        1.0 bpc - => apc

        result.data.x a.data.x apc * b.data.x bpc * + =
        result.data.y a.data.y apc * b.data.y bpc * + =
        result.data.z a.data.z apc * b.data.z bpc * + =

        result@
    }

    def proc linear_to_gamma f32 : f32 {
        sqrtf
    }
    
    def proc bytes Self f32 : u8 [3] {
        => samples
        => self

        0.0 f32' 0.999 f32' Interval.new => i

        self.data 1.0 samples / Vec3.mul => data

        u8 [3] result

        result [0] i data.x linear_to_gamma Interval.clamp 256.0 * u8' =
        result [1] i data.y linear_to_gamma Interval.clamp 256.0 * u8' =
        result [2] i data.z linear_to_gamma Interval.clamp 256.0 * u8' =

        result@
    }

    def proc write Self f32 : void {
        => samples
        => self

        0.0 f32' 0.999 f32' Interval.new => i

        self.data 1.0 samples / Vec3.mul => data

        i data.x linear_to_gamma Interval.clamp 256.0 * i64' printint
        " " printstr
        i data.y linear_to_gamma Interval.clamp 256.0 * i64' printint
        " " printstr
        i data.z linear_to_gamma Interval.clamp 256.0 * i64' printint
        "
" printstr
    }
}