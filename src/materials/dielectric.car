import "src/hitrecord.car"
import "src/vec3.car"

extern proc pow f32 f32 : f32

def proc reflectance f32 f32 : f32 {
    => ref_idx
    => cosine

    1.0 ref_idx - 1.0 ref_idx + / => r0 
    r0 r0 * => r1
    r1 1.0 r1 - 1.0 cosine - 5.0 pow * +
}

struct Dielectric {
    f32 ir

    def proc new f32 : Self {
        Self result

        result.ir swap =

        result@
    }

    def proc emit Self* f32 f32 Vec3 : Color {
        disc disc disc disc
        0.0 0.0 0.0 Color.new
    }

    def proc scatter Self* HRay HitRecord* Color* HRay* : bool {
        => scattered
        => attenuation 
        => record
        => in
        => self

        attenuation 1.0 1.0 1.0 Color.new =
        f32 refraction_ratio
            
        refraction_ratio self.ir@ =

        record.front@ if {
            refraction_ratio 1.0 self.ir@ / =
        }

        scattered.orig record.p@ =
        scattered.time in.time = 

        in.dir Vec3.normal => unit_direction

        unit_direction record.normal@ 0.0 1.0 f32' - Vec3.mul Vec3.dot 1.0 fminf => cos_theta
        1.0 cos_theta cos_theta * - sqrtf => sin_theta

        refraction_ratio@ sin_theta * 1.0 > => cannot_refract
        
        
        cannot_refract cos_theta refraction_ratio@ reflectance random_double01 f32' > || if {
            scattered.dir unit_direction record.normal@ Vec3.reflect =
            true ret
        }
            
        scattered.dir unit_direction record.normal@ refraction_ratio@ Vec3.refract =

        true
    }
}